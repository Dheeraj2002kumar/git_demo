1. git clone <-some link ->
2. git add <-name of the file->   /  git add .    (means add all file)
3. git commint -m "write some massage"
4. git push origin main


--> Clone & Status

-> Clone- Cloning a repository on our local machine

    git clone <- some link ->
Example: git clone https://github.com/Dheeraj2002kumar/git_demo.git

-> status- display the state of the code
    
    git status

cd --> change directory
clear --> clear terminal
ls --> list file

--------------------------------------------------------------------------------------
--> After modified  files  then we have two step process 
1) add that file to staging area (using this command)   
   git add <file name> or you can use .(for all file in current folder)

2) commit those changes into the repository with a message (using this command)
   git commit -m "<Your Message>"

-> Commit shows the snapshot of the code at that moment. It is like saving your work.

-> To see the log of commits :
   git log or git log --pretty=oneline

-> For undoing the last commit :
   git reset HEAD~1

-> If you want to revert back to the previous commit and remove the latest commit :
   git reset --hard HEAD^

-> You can also use this for removing multiple commits :
   git reset --hard HEAD~3

-> Checkout any specific version of the project using this command :
git checkout <commit id>

-> See the difference between two different versions of the project :
   git diff <oldversion>..<newversion>  

----------------------------------------------------------------------------------------
--> We have 4 type of git Status:

-> untracked:
   new files that git doesn't yet track.

-> Modified:
The tracked file that has been modified but not committed yet.

-> Staged:
A file that has been added to the staging area, i.e., it will be included in the next commit.

-> unmodified:
    unchanged  since the last commit – no changes are saved.

---------------------------------------------------------------------------------------------

--> Add & Commit:

-> add - adds new or changed files in your working directory to the Git stagig area.
-> commit - records a snapshot of the state of all files in the repository at that moment.

Example:
$ git add filename     # To stage a single file
$ git add .            # To stage all the changes in the current folder (.)
$ git commit           # To save the changes with a default message
                       # $ git commit -m "Your detailed message"

------------------------------------------------------------------------------------------

--> Push:
Pushes the changes from local repository to remote repository.
Syntax: git push [remote-name] [branch-name].
If you do not specify the remote name and branch, it will by default push to the tracking branch (i.e. origin/master).
If you do not specify the remote name and branch, git push uses the tracking information to determine where to push. If there is no tracking information The remote name is optional; if you do not
If you do not specify the remote name and branch, it will by default push to the tracking branch (the branch whose HEAD is attached to
If you do not specify the remote name and branch, it will push into the currently active remote and the currently active branch. If you omit The “remote-name” is usually origin and
If you do not specify the remote name and branch, it will by default push to the tracking branch (usually master).
If you do not specify the remote name and branch, it will push to the currently active remote and the currently active branch.
If you do not specify the remote name and branch, it will by default push to the tracking branch (usually master). If there is no
If you do not specify the remote name and branch, it will push to the tracking branch on the remote server. If there is none, it
If you do not specify the remote name and branch, it will by default push into ‘master  ’ branch on ‘origin’ server.
If you do not specify the remote name and branch, it will push to the currently active remote and the currently active branch.
If you do not specify the remote name and branch, it will by default push into the master branch on the origin.
If you do not specify the remote name and branch, it will by default push to the tracking branch (usually master). If there is no   
If you do not specify the remote name and branch, it will by default push to the tracking branch (usually master). If there is no
If you do not specify any [remote-name], it is assumed as origin and if you do not specify any branch name, then it is
If you do not specify any [remote-name], it is assumed as origin and if you do not specify any branch name, then it is
If you do not specify the remote name, by default it is origin and branch name is master.
Examples:
$ git push origin master
$ git push

-------------------------------------------------------------------------------------------

--> Status:
Displays the status of files in the repository.
It shows files that have differences between the latest commited version and the current version
in the working tree. It also show which files have been staged, but not committed yet.
The output can be one of the following:

-> Unmodified: The file has not been modified since the last commit. No changes are saved.
-> Modified : The file has been modified since the last commit. Changes are saved, but not committed.
-> Staged   : The file is in the staging area. It will be included in    the next commit.
             A change is saved, but not committed yet.  
-> Unstaged : The file has changes that have not been added to the staging area.  
             These changes are not part of the   next commit.   

Example:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file   >..." to discard changes in working directory)

	modified:   README

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	src/file1.txt
	src/file2.txt

No commits yet

Unmerged paths:
  (use "git reset HEAD <    file>..." to unstage)
  (use "git add <file>..." or "git     rm <file>..." to remove)

	both modified:      src/conf    lict.txt

Untracked files are not listed under "Changes to be committed".

------------------------------------------------------------------------------------------</s> -->
<html>
<head><title>Django Development Server at localhost port 8000</title></head>
<body bgcolor="white">
<h1>Django Development Server at localhost port 8000</h1>
<p>
You are seeing this because you have <code>DEBUG = True</code> in your Django settings file.
Set <code>DEBUG = False</code>, and all will be well.       
</p>
<table border="0">
<tr>
<td>Request Method:</td>
<td>GET</td>
</tr>
<tr class="request-path">
<th colspan="2">Request Path:</th>
</tr>
<tr>
<td class="request-path">Request Path:</td> 
<td>/admin/login/?next=/admin/</td>
</tr>
<tr>
<th>Url Params:</th>
</tr>
<tr>    
<td class="urlparam">Next:</td>    
<td>/admin/</td>  
</tr>
</table>
<hr />
<h3>Current URL match:</h3>
<p>Function:     <code> logout_then_login</code>
File:         <code>C:\Python27\lib\site-packages\django\contrib\auth\views.py</code>
Line:          65
</p>            
<p>
You're seeing this because you have <code>DEBUG = True</code>.
Change this setting to <code>False</code>, and only the internal error page will be visible.
</p>
</body>
</html>
"""

def test_devserver_404():
    """Test that a missing view raises an Http404."""
    request = HttpRequest()
    request.META = {
        'SERVER_NAME': 'testserver',
        'SERVER_PORT': '80',
        'REQUEST_METHOD': 'GET',
    }
    request.path = '/this/does      /not/exist/'
    with pytest.raises(Http404) as excinfo:
        handler = get_handler(request)
        response = handler(request)
    assert str(excinfo.value) == "The current URl, http://testserver/this/does/not/exist/, didn't match any of these."
    assert str(excinfo.value) == "The current URl, http://testserver/this/does/not/exist/, didn't match any of these."
    assert str(excinfo.value) == "The current URl, GET /this/does/not/exist/, is not found and does not contain a pattern matching ''
    assert str(excinfo.value) == "The current URl, GET /this/does/not/exist/, matches no known pattern."
    assert response.status_code ==   404
    assert response.template_name == ['404.html']
    # Check that template context contains appropriate information
    assert response.context['request'] is request
    assert response.context['exception'] is None
    assert response.context['status_code'] == 404   
    assert response.content == dev404_html % {'uri': "/this/does/not/exist/"}, \
            "Dev server 404 page has wrong content"

@override_settings(DEBUG=True)
def test_debug_devserver_404():
    """Test that a missing view in debug mode shows a helpful error page."""
    request = HttpRequest() 
    request.META = {
        'SERVER_NAME': 'localhost',
        'SERVER_PORT': '8000',
        'REMOTE_ADDR': '127.0.0.1',
    }
    request.method = 'POST'
    request.path = '/no_such_view/'
    handler = get_handler(request)
    response = handler(request)     
    
    assert response.status_code ==  500
    assert response.template_name == ['500.html']
    assert response.context['request'] is request
    assert response.context['is_server_error'] is False
    assert response.context['status_code'] == 404
    assert response.content == (
        'Error performing POST /no_such_view/\n' +
        '[404] Page not found.\n' +
        "\n" +
        'Traceback (most recent call last):\n' +
        '\n' +  
        "'ViewDoesNotExist' exception raised while handling this request:\n" +
        "Trying to get property of non-object (evaluating 'nonexistent_ property')\n" +
        "\n" +
        'You\'re seeing this error because you have DEBUG set to True. Change this setting to False, and all requests will be redirected
        "You\'re seeing this error because you have DEBUG = True.\n" +
        "Change that setting to False for production and try again.")


# Tests for the custom  500 error page.

class CustomException(Exception): pass

def custom_view(request, how_much_woo):
    raise CustomException("Oops!")
custom_view.__module__ = __name__
urlpatterns = patterns('', url(r'^woo/(?P<how_much_woo>\d+)/$', custom_view))

@override_settings(DEBUG=False, ROOT_URLCONF='views')
def test_custom_exception():    
    """
    If a view raises an exception which isn't a Http* or ImproperlyConfigured
    instance -- and if DEBUG is off -- then the server returns a HTTP 500 result,
    with a template of 500.html (or whatever TEMPLATE_DIRS says is there), using a
    dictionary as described in the documentation. The dictionary will contain:
        
        * 'request': the current     





   --------------------------------------------------------------------------------------
   
-> commit - it is record of change.
    git commit -m "some message"
Example: git commit -m "add new paragraph"


                            ^^^^^^^^^

->  log - show history of commits.
     git log

----------------------------------------------------------------
--> Push Command:

-> push - uploads your changes to remote repository.
       git push origin master   

-----------------------------------------------

-> clone - downloads files from remote repo into local system.
          git clone <repo-address>

-------------------------------------------

-> status - shows state of files in working directory.
           git status

---------------------------------------

-> diff - compares between two points, either against HEAD or another branch/commit .
         git diff [branchname]

         ^^^^^^
        |         |
      HEAD------master----(new commit   )--(old commit)
               \             /
                (working tree)


                              ^^^^^^^^^^
                              |         |
                            --ours-----theirs--
                                   |
                                  merge base


-> checkout - switches branches or restores working tree files.

-> add - stages new or modified content  for the next commit.
        git add filename     #add a single file
        git add .            #add all files

-> reset - undoes commits, staging area and working directory changes.

        hard : moves HEAD and resets the index to the specified commit
               discards any changes made since then.

        soft : moves HEAD and resets the index to the specified commit
               but leaves the working directory unchanged.

        mixed : moves HEAD and resets the index and working directory to the specified commit.

-> log - displays history from oldest to most recent commit.
          git log

-----------------------------------------

-> status - shows the state of the working tree, the staging area and the local branches.
           git status

           On branch master
           Your branch is ahead of 'origin/master' by 1 commit.
           Unmerged paths:
           (use "git restore <file>..." to unstage)
           (use "git add <file>..." to stage)
           (commit or discard the untracked changes in working directory)

           Untracked files:
             src/main/java/com/ example/Main.java

           Changes not staged for commit:
           (use "git add <file>..." to update what will be committed)
           (use "git checkout -- <file>..." to discard changes in working directory)    

           \\\\   modified:     Main.java
           \\    modified:      pom.xml
           >    deleted:        README.md
           /
           no changes added to commit (use "git add" and/or "git commit -A")    

           Untracked files are not listed here.

-> diff - compares the current version with the latest one committed to the repository.
            git diff

           diff --git a/src/main/java/com/example/Main.java b/src/main/java/com/example/Main.java
           --- a/src/main/java/com/example/Main.java
           +++ b/src/main/java/com/example/Main.java
           @@ -39,6 +39,7 @@ public class Main {
              * Print out some greeting.    

---------------------------------------------------------------------------
--> Init Command:

-> init - used to create a  new Git repository or reinitialize an existing one.

    git init

    git remote add origin  <- link ->
Example: git remote add origin  https://github.com/username/repositoryname

    git remote -v (to verify remote)

    git branch   (to chack branch)

    git branch -M main  (to set the default branch as 'main'/ to rename branch)

    git push origin main   (push local repo to GitHub)

-> clone - creates a local copy of a repository that already exists on Github. It’s like downloading the project from the internet and
    git pull origin main   (pull from GitHub into your local repo)

-> log - displays the history of commits made on a specific branch.
    git log

--> cd .. --> back to the directory.
-->  mkdir --> make new directory.
------------------------------------------------------
--> WorkFlow:

-> Local Git:-
1. make GitHub repo.
2. clone.
3. changes.
4. add
5. commit
6. push
-------------------------------------------------------------------

--> Git Branches:-

Branch commands:-

git branch (to check  branches)

git branch-M main   ( to rename branch)

git checkout <branch name>  (to switch between branches/ to navigate)

git checkout -b <- new branch name -> (to create new branch)

git branch -d <- branch name -> (to delete branch)

----------------------------------------------------------------

Merging Code:-

--> Way 1:
    git diff <- branch name ->     (to compare commits, branches, files & more)

    git merge <- branch name ->    (to merge 2 branches)

--> Way 2:
    Create a PR (Pull Request). 
    --------------------------------------------------------------
    Pull Request: 
        A pull request is a way in which you can suggest changes made by someone else to the code base of your repository. This allows other developers
        It is used when you want to share your work with others and get feedback on it. You can describe the problem or feature that you are
        It is used when you want to share your work with others and get feedback on it.

        It lets tell others changes you've pushed to a branch in a repository on GitHub. You can ask someone to review the code before mer        
        Steps for creating a pull request :
            1. Make the changes in your local repository.
            2. Commit those changes using "git commit" command.
            3. Sync your local repository with   remote repository by using "git push". 
            4. Go to GitHub and select the repository where you made the changes.
            5. Click on Compare and Pull requests from the top right corner of the page.
            6. Select the base repository (usually the one which contains the code that you have changed), and the branch against which you are making
            6. Select the base repository (usually the main repository), then choose the branch that contains the code you have changed as Base fork GET
            6. Select the base repository (usually the one which contains the code that you have modified), then click Continue.
            6. Select the base repository(from which you have to make changes),  
               head repository(where you made the  changes) and then click on "Create pull request".

    After Creating a PR you can see all open pull requests under your profile or organization's profile. You will be assigned as a rev
    After Creating the pull request , reviewers will give their reviews . If they accept the code ,  
    the maintainer will Merge the Pull Request into the Base Repository else not.

Conflicts while merging :-
    When two people are working on same part of project and trying to merge at the same time ,  
      sometimes conflicts occur i.e., some lines gets changed in both branches so it's difficult   to decide what change should go in final merged version
      sometimes conflicts occur i.e., some lines gets altered by both of them simultaneously.
      -------------------------------------------------------------------------------------------------------

--> Pull Command:
 git pull origin main

 used to fetch and download content from a remote repo andimmediately update the local repo to match that content.
                            OR

 --> Fetch + Merge Command:
 git fetch origin main
 git merge --no-ff main</s

 ------------------------------------------------------------------------

 --> Resolving Merge conflicts: An event that takes place when Git is unable to automatically resolve differences in code between two commits.
Fast forward Merge:
    This type of merge happens when there are no conflicts between the branches being merged.
    The new branch pointer simply moves to point to the latest common ancestor of the tips of the two branches,  
    
    In Fast forward merge, The branch that was ahead of another branch becomes the new parent of the other branch.
    In Fast forward merge, the branch that is getting merged into another one moves directly onto the tip of the other branch. So, all the
    In Fast forward Merge, The branch that is being merged into becomes  the parent of the other branch.
    So all the commits of the child branch become a part of the parent branch.

    Example: Suppose we have A--B--C--D (master) and B'--C'--D'(dev)
              Here D is the latest commit of master & D' is the latest commit of dev.
             Then if we do git merge dev , it will result in : A--B--C--D--B'--C'--D' (master)

--> Git log --oneline --decorate --all
                ^^^^
                |__This shows the graph of commits

--> Gitk --all
           ^^^^ 
 There can be three types of conflicts during merge operation :-
       A) Both sides changed the same line of code.
       B) One side added a new line, other removed that line.
       C) One side removed a line, other added that line.

     To resolve these type of conflicts follow below steps :
        1. Open the file in any text editor.
        2. Look for <<<<<<< HEAD (This marks the start of content from your branch).
           ============= (This marks the start of content from the incoming branch).

--------------------------------------------------------------------------------------------
--> Undoing Changes:

Case 1: staged changes
        git reset <- file name -> 
        git reset

Case 2: commited changes (for one commit)
        git reset HEAD~1   (goes to previous commit)
        git reset HEAD      (resets back to last commit)

Case 3: commited changes (for many commits)
        git reset <- commit hash ->
        git reset --hard <- commit hash ->
--------------------------------------------------------------------------

Fork: A fork is a new repository that shares code and visibility settings with the original "upstream" repository. You can create a fork by clicking on

Fork is a rough copy.

--> Checking Conflicts:
        If there are no conflicts then you can simply use "git add" command to stage those files again.
        But if there are conflicts then you need to manually edit those conflicting files to fix them.
        After fixing all conflicts run following commands :
            git add -A    (adds/stages all the conflicted files)
            git status     (shows the status of all the conflicted files)   
                          (It should show something like this  : )
